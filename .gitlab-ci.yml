variables:
  PKG: "gitlab.com/unitto/nohi"

  TAG_IMAGE: ${REGISTRY_IMAGE}:${CI_COMMIT_TAG}


stages:
  - test
  - build


image: golang:1.14.7-alpine3.12

test:
  stage: test
  before_script:
    - apk add --no-cache gcc=9.3.0-r2 g++=9.3.0-r2
  script:
    - go test -v ./... -cover -race

lint:
  stage: test
  before_script:
    - apk add --no-cache gcc=9.3.0-r2 g++=9.3.0-r2
    - wget -O- -nv https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s v1.30.0
  script:
    - ./bin/golangci-lint -v run

docs:
  image:
    name: squidfunk/mkdocs-material:5.5.3
    entrypoint: [""]
  stage: test
  except:
    - master
  before_script:
    - apk add --no-cache git
  script:
    - sed -i "s~{commit}~$(git rev-parse --short HEAD)~g" docs/index.md
    - mkdocs build --verbose
  artifacts:
    paths:
      - site


pages:
  image: squidfunk/mkdocs-material:5.5.3
  stage: build
  only:
    - master
  before_script:
    - apk add --no-cache git
  script:
    - sed -i "s~{commit}~$(git rev-parse --short HEAD)~g" docs/index.md
    - mkdocs build --verbose --site-dir public
  artifacts:
    paths:
      - public

build-master:
  image: docker:stable
  stage: build
  services:
    - docker:dind-stable
  only:
    - master
  before_script:
    - docker login -u ${REGISTRY_USER} -p ${REGISTRY_PASSWORD}
  script:
    - docker build --build-arg flags="-X ${PKG}/cmd.Commit=${CI_COMMIT_SHORT_SHA}" -t ${REGISTRY_IMAGE} -f build/Dockerfile .
    - docker push ${REGISTRY_IMAGE}

build-tags:
  image: docker:stable
  stage: build
  services:
    - docker:dind-stable
  only:
    - tags
  before_script:
    - docker login -u ${REGISTRY_USER} -p ${REGISTRY_PASSWORD}
  script:
    - docker build --build-arg flags="-X ${PKG}/cmd.Commit=${CI_COMMIT_SHORT_SHA} ${PKG}/cmd.Version=${CI_COMMIT_TAG}" -t ${TAG_IMAGE} -f build/Dockerfile .
    - docker push ${TAG_IMAGE}
